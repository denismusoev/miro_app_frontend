import React, {useContext, useEffect, useState} from "react";
import { useNavigate, useParams } from "react-router-dom";
import {
    fetchBoardByProjectId,
    createBoard,
    updateBoard,
    deleteBoard
} from "../utils/api";

import {
    Button,
    Container,
    Card,
    Row,
    Col,
    Modal,
    Form,
    Toast
} from "react-bootstrap";
import {ProjectContext} from "../components/ProjectProvider";

/**
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Miro
 */
const CLIENT_ID = "3458764618211634466";
const REDIRECT_BASE = "http://localhost:3000/project"; // –í–∞—à —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ URL
const BACKEND_URL = "http://localhost:8080";   // –í–∞—à –±—ç–∫–µ–Ω–¥

function ProjectPage() {
    const { projectId } = useContext(ProjectContext);
    const navigate = useNavigate();

    const [boards, setBoards] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ CRUD –ø–æ –¥–æ—Å–∫–∞–º
    const [showToast, setShowToast] = useState(false);
    const [toastMessage, setToastMessage] = useState("");
    const [showModal, setShowModal] = useState(false);
    const [editMode, setEditMode] = useState(false);
    const [currentBoard, setCurrentBoard] = useState({
        name: "",
        description: "",
        projectId: projectId,
        isImported: false
    });


    // ---------- –õ–æ–≥–∏–∫–∞ –¥–ª—è Miro ----------
    const [miroBoards, setMiroBoards] = useState([]);
    const [showMiroModal, setShowMiroModal] = useState(false);
    const [selectedBoards, setSelectedBoards] = useState([]);


    // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –≥—Ä—É–∑–∏–º –¥–æ—Å–∫–∏ –∏–∑ –ë–î
    useEffect(() => {
        loadBoards();
    }, []);

    // –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ —Å Miro (–∫–æ–≥–¥–∞ –≤ URL –µ—Å—Ç—å ?code=xxx) –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å–∫–∏ –∏–∑ Miro
    useEffect(() => {
        const urlParams = new URLSearchParams(window.location.search);
        const codeParam = urlParams.get("code");

        if (codeParam) {
            //console.log("–ü–æ–ª—É—á–µ–Ω code –∏–∑ Miro:", codeParam);
            handleMiroCallback(codeParam);
            window.history.replaceState(null, "", window.location.pathname);
        }
    }, []);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å–æ–∫ (–ª–æ–∫–∞–ª—å–Ω—ã—Ö, –∏–∑ –ë–î)
    const loadBoards = async () => {
        try {
            const response = await fetchBoardByProjectId(projectId);
            setBoards(response.data);
            setLoading(false);
        } catch (err) {
            setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.");
            setLoading(false);
        }
    };

    // ---------- –ú–µ—Ç–æ–¥—ã CRUD –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–æ—Å–æ–∫ ----------
    const handleShowModal = (
        board = { name: "", description: "", projectId: projectId, isImported: false }
    ) => {
        setEditMode(!!board.id);
        setCurrentBoard(board);
        setShowModal(true);
    };

    const handleCloseModal = () => {
        setShowModal(false);
        setCurrentBoard({ name: "", description: "", projectId: projectId, isImported: false });
    };

    const handleSave = async () => {
        try {
            if (editMode) {
                await updateBoard({ id: currentBoard.id, ...currentBoard });
                setToastMessage("–î–æ—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
            } else {
                await createBoard(projectId, currentBoard);
                setToastMessage("–î–æ—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.");
            }
            setShowToast(true);
            handleCloseModal();
            loadBoards();
        } catch (error) {
            setToastMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ—Å–∫–∏.");
            setShowToast(true);
        }
    };

    const handleDelete = async (boardId) => {
        if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –¥–æ—Å–∫—É?")) {
            try {
                await deleteBoard(boardId);
                setToastMessage("–î–æ—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.");
                setShowToast(true);
                loadBoards();
            } catch (error) {
                setToastMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ—Å–∫–∏.");
                setShowToast(true);
            }
        }
    };

    // ---------- –õ–æ–≥–∏–∫–∞ Miro: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –∏–º–ø–æ—Ä—Ç ----------

    // –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω —é–∑–µ—Ä–∞ (–µ—Å–ª–∏ –æ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ localStorage –ø–æ–¥ –∫–ª—é—á–æ–º "token")
    const getUserToken = () => {
        return localStorage.getItem("token") || "";
    };

    // 1. –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–º–ø–æ—Ä—Ç —Å Miro" -> —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ Miro OAuth
    const handleMiroLogin = () => {
        // –£–∫–∞–∂–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä–Ω—ë–º—Å—è –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        localStorage.setItem("currentProjectId", projectId);
        const redirectUri = `${REDIRECT_BASE}`;
        window.location.href = `https://miro.com/oauth/authorize?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${redirectUri}`;
    };

    // 2. –ö–æ–≥–¥–∞ –≤ URL –µ—Å—Ç—å code, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–æ—Ç –º–µ—Ç–æ–¥:
    const handleMiroCallback = async (code) => {
        try {
            const userToken = getUserToken();
            const response = await fetch(`${BACKEND_URL}/miro/exchange-code`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${userToken}`
                },
                body: JSON.stringify({ code })
            });
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
            }
            const data = await response.json();
            //console.log("–°–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –æ—Ç –±—ç–∫–µ–Ω–¥–∞:", data);
            setMiroBoards(data);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å Miro-–¥–æ—Å–∫–∞–º–∏
            if (data && data.length > 0) {
                setShowMiroModal(true);
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ—Å–æ–∫ Miro:", error);
            setToastMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å–æ–∫ –∏–∑ Miro");
            setShowToast(true);
        }
    };

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —á–µ–∫–±–æ–∫—Å—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ—Å–æ–∫
    const toggleBoardSelection = (boardId) => {
        setSelectedBoards((prev) => {
            if (prev.includes(boardId)) {
                return prev.filter((id) => id !== boardId);
            } else {
                return [...prev, boardId];
            }
        });
    };

    // 3. –ò–º–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ—Å–æ–∫
    const handleImport = async () => {
        if (selectedBoards.length === 0) {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–æ—Å–∫—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.");
            return;
        }
        try {
            const userToken = getUserToken();
            const response = await fetch(`${BACKEND_URL}/miro/import-boards`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${userToken}`
                },
                body: JSON.stringify({
                    ids: selectedBoards,
                    projectId: projectId
                })
            });
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ${response.status}`);
            }
            const data = await response.json();
            //console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞ –¥–æ—Å–æ–∫:", data);

            alert("–ò–º–ø–æ—Ä—Ç –¥–æ—Å–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!");
            setShowMiroModal(false);
            setSelectedBoards([]);
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–æ—Å–æ–∫, –≤–¥—Ä—É–≥ –∏–º–ø–æ—Ä—Ç –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–µ
            loadBoards();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–æ—Å–æ–∫:", error);
            alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–æ—Å–æ–∫. –°–º. –∫–æ–Ω—Å–æ–ª—å.");
        }
    };

    return (
        <Container className="mt-4">
            <h2 className="mb-3">üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫</h2>
            <div className="d-flex gap-2 mb-3">
                <Button variant="success" onClick={() => handleShowModal()}>
                    ‚ûï –°–æ–∑–¥–∞—Ç—å –¥–æ—Å–∫—É
                </Button>
                <Button variant="info" onClick={handleMiroLogin}>
                    –ò–º–ø–æ—Ä—Ç —Å Miro
                </Button>
            </div>

            {loading ? (
                <p className="mt-3">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</p>
            ) : error ? (
                <p className="mt-3 text-danger">‚ùå {error}</p>
            ) : boards.length === 0 ? (
                <p className="mt-3">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å–æ–∫.</p>
            ) : (
                <Row className="mt-3">
                    {boards.map((board) => (
                        <Col key={board.id} md={6} lg={4} className="mb-3">
                            <Card
                                style={{ width: "100%", height: "10rem", cursor: "pointer" }}
                                onClick={() => navigate(`/board/${board.id}`)}
                            >
                                <Card.Body>
                                    <Card.Title>{board.name}</Card.Title>
                                    <Card.Text>{board.description}</Card.Text>
                                    <Button
                                        variant="warning"
                                        size="sm"
                                        className="me-2"
                                        onClick={(e) => {
                                            e.stopPropagation();
                                            handleShowModal(board);
                                        }}
                                    >
                                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                    </Button>
                                    <Button
                                        variant="danger"
                                        size="sm"
                                        onClick={(e) => {
                                            e.stopPropagation();
                                            handleDelete(board.id);
                                        }}
                                    >
                                        üóë –£–¥–∞–ª–∏—Ç—å
                                    </Button>
                                </Card.Body>
                            </Card>
                        </Col>
                    ))}
                </Row>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–æ—Å–∫–∏ */}
            <Modal show={showModal} onHide={handleCloseModal}>
                <Modal.Header closeButton>
                    <Modal.Title>{editMode ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å–∫—É" : "–°–æ–∑–¥–∞—Ç—å –¥–æ—Å–∫—É"}</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <Form>
                        <Form.Group className="mb-3">
                            <Form.Label>–ù–∞–∑–≤–∞–Ω–∏–µ</Form.Label>
                            <Form.Control
                                type="text"
                                value={currentBoard.name}
                                onChange={(e) => setCurrentBoard({ ...currentBoard, name: e.target.value })}
                            />
                        </Form.Group>
                        <Form.Group className="mb-3">
                            <Form.Label>–û–ø–∏—Å–∞–Ω–∏–µ</Form.Label>
                            <Form.Control
                                as="textarea"
                                rows={3}
                                value={currentBoard.description}
                                onChange={(e) => setCurrentBoard({ ...currentBoard, description: e.target.value })}
                            />
                        </Form.Group>
                    </Form>
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={handleCloseModal}>
                        –û—Ç–º–µ–Ω–∞
                    </Button>
                    <Button variant="primary" onClick={handleSave}>
                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </Button>
                </Modal.Footer>
            </Modal>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–æ—Å–æ–∫ –∏–∑ Miro */}
            <Modal show={showMiroModal} onHide={() => setShowMiroModal(false)} size="lg">
                <Modal.Header closeButton>
                    <Modal.Title>–ò–º–ø–æ—Ä—Ç –¥–æ—Å–æ–∫ –∏–∑ Miro</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    {miroBoards.length === 0 ? (
                        <p>–ù–µ—Ç –¥–æ—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</p>
                    ) : (
                        <Row>
                            {miroBoards.map((board) => {
                                const boardIdStr = String(board.id);
                                const isChecked = selectedBoards.includes(boardIdStr);
                                return (
                                    <Col key={board.id} md={6} className="mb-3">
                                        <Card>
                                            <Card.Body>
                                                <Form.Check
                                                    type="checkbox"
                                                    id={`checkbox-${board.id}`}
                                                    label={
                                                        <>
                                                            <strong>{board.name}</strong>
                                                            <br />
                                                            <span style={{ fontSize: "0.85rem" }}>
                                ID –¥–æ—Å–∫–∏: {board.id}
                              </span>
                                                        </>
                                                    }
                                                    checked={isChecked}
                                                    onChange={() => toggleBoardSelection(boardIdStr)}
                                                />
                                            </Card.Body>
                                        </Card>
                                    </Col>
                                );
                            })}
                        </Row>
                    )}
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={() => setShowMiroModal(false)}>
                        –ó–∞–∫—Ä—ã—Ç—å
                    </Button>
                    <Button variant="primary" onClick={handleImport}>
                        –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ—Å–∫–∏
                    </Button>
                </Modal.Footer>
            </Modal>

            {/* Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
            <Toast
                animation
                delay={2000}
                autohide
                show={showToast}
                onClose={() => setShowToast(false)}
                style={{
                    position: "fixed",
                    bottom: 20,
                    right: 20,
                    zIndex: 9999,
                    backgroundColor: "#333",
                    color: "#fff"
                }}
            >
                <Toast.Body>{toastMessage}</Toast.Body>
            </Toast>
        </Container>
    );
}

export default ProjectPage;
